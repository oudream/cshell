ngx_http_proxy_module

1. 将请求转发至后端服务器

        location / {
                proxy_pass http://192.168.31.3/ ;
        }
        # 当客户端访问自己时，Nginx将请求转发至 后端的 192.168.31.3 服务器上
        
        
2. 当后端服务器（如Web）的监听端口改为 8080时：

        location / {
                proxy_pass http://192.168.31.3:8080/ ;
        }


3. 跳转的服务器后面是否加 “/” 的区别：

        server_name www.test.com
        location /test {
                proxy_pass http://192.168.31.3/ ;
        }        
        # 跳转结果为： http://www.test.com/test --> http://192.168.31.3


        server_name www.test.com
        location / {
                proxy_pass http://192.168.31.3;
        }
        # 跳转结果为： http://www.test.com/test --> http://192.168.31.3/test
        
        注意：如果location定义其uri时使用了正则表达式的模式，则proxy_pass之后不能加有 “/”。
              添加斜线意味着，整个正则表达式匹配的项被一个链接替换，是不合理的。
         
        


4. Nginx 实现动静分离
        
    Web_Server_1(192.168.31.3) 负责处理静态页面
        
        yum -y install httpd
        echo 'This is Server 1' > /var/www/html/index.html
        systemctl start httpd
        
        
    Web_Server_2(192.168.31.4) 负责处理动态页面
        
        yum -y install httpd php-fpm
        echo 'This is Server 2' > /var/www/html/index.html
        vim /etc/httpd/conf.d/fastcgi.conf
                proxyrequests off
                proxypassmatch  "^/(.*\.php)$" fcgi://127.0.0.1:9000/var/www/html/$1
        vim /var/www/html/index.php
                <?php>
                        phpinfo();
                <?>
        systemctl start php-fpm
        systemctl start httpd
    
    Proxy_Server(192.168.1.2) 负责实现动静分离
        
         server {
                listen       80 default_server;
                server_name  www.test.com;
                root /app/website1;

                location ~ \.(html|txt|css|jpg)$ {
                        proxy_pass http://192.168.31.3;

                }
                location ~ \.php$ {
                        proxy_pass http://192.168.31.4;

                }
        }
        # 静态页面将被调度到 192.168.31.3 上 ， 动态页面经会被调度到 192.168.31.4 上
        


5. 设定发往后端服务的请求的头部值 （使后端服务器可以看到 Client 的 IP 地址）

    Proxy_Server : 定义头部信息
        
        server {
                listen       80 default_server;
                server_name  www.test.com;
                root /app/website1;

                location ~ \.(html|txt|css|jpg)$ {
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_pass http://192.168.31.3;

                }

                location ~ \.php$ {
                        proxy_pass http://192.168.31.4;

                }
        }
        # proxy_set_header : 定义添加的头部信息名字为 X-Real-IP  ，值为 $remote_addr 客户端IP
        
    Web_server : 定义日志格式
        vim /etc/httpd/conf/httpd.conf
                 LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" \"%{X-Real-IP}i\"" testlog
                 CustomLog "logs/access_log" testlog
        # 在原有的日志格式后面添加  \"%{X-Real-IP}i\" ，即让日志中记录代理服务器在请求报文中添加的  X-Real-IP 值
        
        # 对比前后日志格式如下
         192.168.31.20 - - [31/Aug/2018:20:25:07 +0800] "GET /index.html HTTP/1.0" 200 21 "-" "curl/7.29.0"
         
         192.168.31.20 - - [31/Aug/2018:20:28:01 +0800] "GET /index.html HTTP/1.0" 200 21 "-" "curl/7.29.0" "192.168.1.1"


6. 启用代理服务器缓存功能
        
        http {
                
            proxy_cache_path /var/cache/nginx/proxy_cache
                levels=1:1:1 keys_zone=proxycache:4096m
                inactive=120s max_size=3g;   
        }
        # 定义缓存信息 ，要在 http 级别中定义
        # /var/cache/nginx/proxy_cache       缓存存放的路径，最好将缓存目录放在独立的磁盘上
        # levels                             指定为目录深度，此处为三层目录，一级目录1个字符，二级目录1个字符，三级目录3个字符
        # keys_zone                          缓存名字 proxycache ，内存缓存空间为 2G
        # inactive                           非活动时长 120s，多长时间没有访问就被清楚，可以是 d m h s
        # max_size                           硬盘缓存空间大小，默认将经常访问的内容放入内存缓存空间，当其不够用时，将不经常访问的放入硬盘缓存空间  

        server {
        proxy_cache proxycache;
        proxy_cache_key $request_uri;
        proxy_cache_valid 200 302 301 1h;
        proxy_cache_valid any 1m;
        }
        # 调用缓存信息 ，可以定义在 http server location
        # proxy_cache proxycache             调用名字为 proxycache 的缓存
        # proxy_cache_key                    以什么样的参数得到的文件名，默认为 $scheme$proxy_host$request_uri
                                             即通过协议名 主机名 请求 uri 通过 md5 得到的文件名
        # proxy_cache_valid 200 302 301 1h   状态码为 200 302 301 的 的缓存时长为 1 小时
        # proxy_cache_valid any 1m           其它的都为 1 分

        # proxy_cache_use_stale              在被代理的后端服务器出现哪种情况下，可直接使用过期的缓存响应客户端:
                                             error | timeout | invalid_header | updating |http_500 | http_502 |
                                             http_503 | http_504 | http_403 | http_404 | off
                                             
        # proxy_cache_methods                对哪些客户端请求方法对应的响应进行缓存，GET和HEAD方法总是被缓存
        # proxy_hide_header field            默认nginx在响应报文中不传递后端服务器的首部字段Date, Server, X-Pad,
                                             X-Accel-等，用于隐藏后端服务器特定的响应首部
                                             
        # proxy_connect_timeout              定义与后端服务器建立连接的超时时长，如超时会出现502错误，默认为
                                             60s，一般不建议超出75s
                                             
        # proxy_send_timeout                 将请求发送给后端服务器的超时时长；默认为60s
        # proxy_read_timeout                 等待后端服务器发送响应报文的超时时长，默认为60s
        
        
        


7. fastcgi :  ngx_http_fastcgi_module
        
        （1） nginx 将动态请求交由后端 php-fpm 处理，后端为 httpd + php-fpm
                Proxy_Server:
                        location ~*  \.php$ {
                                fastcgi_pass 192.168.31.4:9000;
                                fastcgi_index index.php;
                                fastcgi_param  SCRIPT_FILENAME /var/www/html$fastcgi_script_name;
                                include fastcgi_params;
                        }
                Web_Server:
                        yum install php-fpm
                        vim /etc/php-fpm.d/www/conf
                                listen = 9000
                                listen.allowed_clients = 192.168.31.20
                                # 或者注释此行 ， 表示允许所有
                        vim /etc/httpd/conf.d/fastcgi.conf
                                proxyrequests off
                                proxypassmatch  "^/(.*\.php)$" fcgi://127.0.0.1:9000/var/www/html/$1                
                                

8. 负载均衡
    （1）
        http {
            upstream backend {
                server 192.168.31.3:80;
                server 192.168.31.4:80;
            }
        }    
        # 在 http 中定义 后端的服务器组 ，名字为 backend
        
        location / {
                proxy_pass http://backend;
        }
        # 在 server 中引用，默认为 wrr 轮询
        
        
    （2）
        http {
            upstream backend {
                server 192.168.31.3:80 weight 2 ;
                server 192.168.31.4:80 weight 5;
            }
        } 
        # weight   权重 ，值越大 ，被调度的几率越大
        
    （3）
        http {
            upstream backend {
                server 192.168.31.3:80 weight 2 ;
                server 192.168.31.4:80 backup;
            }
        }         
        # 将 192.168.31.4 设置为备份服务器，平时不参与调度，只有当主服务器 down 机，才会接替主服务提供服务。
          当主服务恢复后，备份服务器工作重新移交给主服务器。
          
          
    （4）
        http {
            upstream backend {
                server 192.168.31.3:80 weight=2;
                server 192.168.31.4:80 down;
                server 192.168.31.5:80 backup;
            }
        }
        # down 标记为“不可用”，配合ip_hash使用，实现灰度发布
        
        
    （5）
        http {
            upstream backend {
                ip_hash;
                server 192.168.31.3:80 weight=2;
                server 192.168.31.4:80 weight=3;
                #server 192.168.31.5:80 backup;
            }
        }        
        # 设置调度算法为 ip_hash ,同一个ip会被固定分配到指定的后端服务器。此算法不支持 backup
        
    （6）
        http {
            upstream backend {
                least_conn;
                server 192.168.31.3:80 weight=2;
                server 192.168.31.4:80 weight=2;
                #server 192.168.31.5:80 backup;
            }
        }
        # least_conn    最少连接调度算法，当server拥有不同的权重时其为wlc，
          当所有后端主机连接数相同时，则使用wrr，适用于长连接。 此算法不支持 backup
    （7）
        http {
            upstream backend {
                hash $request_uri;
                server 192.168.31.3:80 weight=2;
                server 192.168.31.4:80 weight=2;
                #server 192.168.31.5:80 backup;
            }
        } 
        # url_hash    根据对 url 进行hash ,使每个url 定向到后端同一台服务器上。 不支持 backup
        
        
    （8）
        stream {
                upstream mysqlsrvs {
                    server 192.168.31.3:3306;
                    server 192.168.31.4:3306;
                    least_conn;
                }
                server {
                    listen 192.168.1.2:3306;
                    proxy_pass mysqlsrvs;
                }
        }
        # nginx 也可以做 mysql 的负载均衡。注意其配置在 main 语句块。

    
    
    
    
    
    
    
    
    
            

