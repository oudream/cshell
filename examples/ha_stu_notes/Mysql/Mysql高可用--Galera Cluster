                    +------------+----------------+--------------------------------+---------------+
                    |  hostname  | system version |          Mysql version         |       IP      |
                    |------------|----------------|--------------------------------|---------------|
                    |    DB1     |   CentOS 7.5   |  MariaDB-Galera-server-5.5.61  |  192.168.1.1  |
                    |------------|----------------|--------------------------------|---------------|
                    |    DB2     |   CentOS 7.5   |  MariaDB-Galera-server-5.5.61  |  192.168.1.2  |
                    +------------+----------------+--------------------------------+---------------+
                    |    DB2     |   CentOS 7.5   |  MariaDB-Galera-server-5.5.61  |  192.168.1.2  |
                    +------------+----------------+--------------------------------+---------------+
                                          Galera Cluster 三节点配置环境
        

1. 安装 MariaDB-Galera-server （专门集群版本的数据库)
          
      镜像地址：https://mirrors.tuna.tsinghua.edu.cn/mariadb/mariadb-5.5.61/yum/centos74-amd64/
          
      DB1，DB2,DB3：
          yum install MariaDB-Galera-server
          
         
2. 修改配置文件：（/etc/my.cnf.d/server.cnf  DB1,DB2,DB3配置基本一样）
      [galera]
          wsrep_provider=/usr/lib64/galera/libgalera_smm.so                           # Galera 模块
          wsrep_cluster_address="gcomm://192.168.1.1,192.168.1.2,192.168.1.3"         # 定义集群成员
          binlog_format=row                                                           # 默认基于行的二进制日志格式
          default_storage_engine=InnoDB                                               # 默认InnoDB数据引擎
          innodb_autoinc_lock_mode=2                                                  # InnoDB的自动锁模式
          bind-address=0.0.0.0                                                        # 端口绑定的地址（所有IP）
      可选配置项
          wsrep_cluster_name = 'mycluster'                                            # 集群名字，默认my_wsrep_cluster
          wsrep_node_name = 'node1'                                                   # 每个节点的名字
          wsrep_node_address = '172.16.0.7'                                           
3. 启动服务
      
      首次启动，需要初始化集群，这里将 DB1 作为第一个启动的节点
          
        在 DB1 上：  
          /etc/init.d/mysql start --wsrep-new-cluster                                # 首次启动，初始化集群
        
        在 DB2,DB3 上：
          /etc/init.d/mysql start （或 service mysql start）                         # 启动，加入集群                                             

4. 测试：

     测试 1（在DB1上创建数据表，DB2，DB3是否能同步数据表）：  
     DB1 :
        
         MariaDB [(none)]> use test;
         MariaDB [test]> create table students (id int auto_increment primary key,name char(50));
         Query OK, 0 rows affected (0.01 sec)
         MariaDB [test]> show tables;
         +----------------+
         | Tables_in_test |
         +----------------+
         | students       |
         +----------------+
         1 row in set (0.00 sec)
         
         
     DB2,DB3 :
         MariaDB [test]> show tables;
         +----------------+
         | Tables_in_test |
         +----------------+
         | students       |
         +----------------+
         1 row in set (0.00 sec)                                                    #可看到，DB1,DB2同步成功
         
         
     测试 2（同时向 DB1,DB2,DB3 插入数据，模拟并发插入数据，在此使用Xshell的一键向所有会话发送消息）    
          
         insert into students (name) values ('test1'),('test2'),('test3');
     在 DB1,DB2,DB3 上可以看到如下
     
         MariaDB [test]> insert into students (name) values ('test1'),('test2'),('test3');
         Query OK, 3 rows affected (0.01 sec)
         Records: 3  Duplicates: 0  Warnings: 0
         MariaDB [test]> select * from students;
         +----+-------+
         | id | name  |
         +----+-------+
         |  2 | test1 |
         |  3 | test1 |
         |  4 | test1 |
         |  5 | test2 |
         |  6 | test2 |
         |  7 | test2 |
         |  8 | test3 |
         |  9 | test3 |
         | 10 | test3 |
         +----+-------+                                                          #三个节点能够并发插入数据
         
         
     
      
          
      
      
      
